package main

import (
	"fmt"
	"html/template"
	"io"
	"os"
	"time"
)

type Questions struct {
	AItests   []AItest
	Generated time.Time
}

type AItest struct {
	PromptPath string
	Question   string
	Answers    Answers
}

type Answers []Answer

type Answer struct {
	Name  string
	Value string
}

func ReadFileToString(filePath string) (string, error) {
	// Open the file for reading
	file, err := os.Open(filePath)
	if err != nil {
		return "", err
	}
	defer file.Close()

	// Read the file content
	bytes, err := io.ReadAll(file)
	if err != nil {
		return "", err
	}

	// Convert bytes to string and return
	content := string(bytes)
	return content, nil
}

func main() {
	qs := Questions{
		Generated: time.Now(),
	}

	for i := 1; i <= 12; i++ {
		prompt := fmt.Sprintf("%d.gpt", i)
		question, err := ReadFileToString(prompt)
		if err != nil {
			panic(err)
		}
		answer, err := ReadFileToString(fmt.Sprintf("%d.answer", i))
		if err != nil {
			panic(err)
		}
		openaiAnswer, err := ReadFileToString(fmt.Sprintf("/tmp/%d.gpt.openai", i))
		if err != nil {
			panic(err)
		}
		mistralAnswer, err := ReadFileToString(fmt.Sprintf("/tmp/%d.gpt.mistral", i))
		if err != nil {
			panic(err)
		}
		anthropicAnswer, err := ReadFileToString(fmt.Sprintf("/tmp/%d.gpt.anthropic", i))
		if err != nil {
			panic(err)
		}
		qs.AItests = append(qs.AItests, AItest{
			PromptPath: prompt,
			Question:   question,
			Answers: Answers{
				Answer{
					Name:  "Correct",
					Value: answer,
				},
				Answer{
					Name:  "OpenAI",
					Value: openaiAnswer,
				},
				Answer{
					Name:  "Mistral",
					Value: mistralAnswer,
				},
				Answer{
					Name:  "Anthropic",
					Value: anthropicAnswer,
				},
			},
		})
	}

	err := generateReport(qs)
	if err != nil {
		panic(err)
	}
}

func generateReport(qs Questions) error {

	const tmpl = `
<!DOCTYPE html>
<html lang=en>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="https://newcss.net/lite.css">
<title>Large Language Model Test</title>
</head>
<body>
{{- range .AItests }}
<h1><a href="#{{ .PromptPath }}">{{ .PromptPath }}</a></h1>
<p>{{.Question}}</p>
<h1>Answers</h1>
{{- range .Answers}}
<h3>{{.Name}}</h3>
<blockquote>{{.Value}}</blockquote>
{{- end}}
{{- end}}
<footer>
<p>Generated by <a href="https://github.com/kaihendry/llm-test">llm-test</a> - {{ .Generated }}</p>
</footer>
</body>
</html>
`

	t := template.Must(template.New("").Parse(tmpl))
	err := t.Execute(os.Stdout, qs)
	return err
}
